/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InternetStatus } from "./InternetStatus";
import { InternetStatusCountArgs } from "./InternetStatusCountArgs";
import { InternetStatusFindManyArgs } from "./InternetStatusFindManyArgs";
import { InternetStatusFindUniqueArgs } from "./InternetStatusFindUniqueArgs";
import { CreateInternetStatusArgs } from "./CreateInternetStatusArgs";
import { UpdateInternetStatusArgs } from "./UpdateInternetStatusArgs";
import { DeleteInternetStatusArgs } from "./DeleteInternetStatusArgs";
import { InternetStatusService } from "../internetStatus.service";
@graphql.Resolver(() => InternetStatus)
export class InternetStatusResolverBase {
  constructor(protected readonly service: InternetStatusService) {}

  async _internetStatusesMeta(
    @graphql.Args() args: InternetStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InternetStatus])
  async internetStatuses(
    @graphql.Args() args: InternetStatusFindManyArgs
  ): Promise<InternetStatus[]> {
    return this.service.internetStatuses(args);
  }

  @graphql.Query(() => InternetStatus, { nullable: true })
  async internetStatus(
    @graphql.Args() args: InternetStatusFindUniqueArgs
  ): Promise<InternetStatus | null> {
    const result = await this.service.internetStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InternetStatus)
  async createInternetStatus(
    @graphql.Args() args: CreateInternetStatusArgs
  ): Promise<InternetStatus> {
    return await this.service.createInternetStatus({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InternetStatus)
  async updateInternetStatus(
    @graphql.Args() args: UpdateInternetStatusArgs
  ): Promise<InternetStatus | null> {
    try {
      return await this.service.updateInternetStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InternetStatus)
  async deleteInternetStatus(
    @graphql.Args() args: DeleteInternetStatusArgs
  ): Promise<InternetStatus | null> {
    try {
      return await this.service.deleteInternetStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
