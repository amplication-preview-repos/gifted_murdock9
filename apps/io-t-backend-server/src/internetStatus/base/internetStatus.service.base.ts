/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, InternetStatus as PrismaInternetStatus } from "@prisma/client";

export class InternetStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InternetStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.internetStatus.count(args);
  }

  async internetStatuses(
    args: Prisma.InternetStatusFindManyArgs
  ): Promise<PrismaInternetStatus[]> {
    return this.prisma.internetStatus.findMany(args);
  }
  async internetStatus(
    args: Prisma.InternetStatusFindUniqueArgs
  ): Promise<PrismaInternetStatus | null> {
    return this.prisma.internetStatus.findUnique(args);
  }
  async createInternetStatus(
    args: Prisma.InternetStatusCreateArgs
  ): Promise<PrismaInternetStatus> {
    return this.prisma.internetStatus.create(args);
  }
  async updateInternetStatus(
    args: Prisma.InternetStatusUpdateArgs
  ): Promise<PrismaInternetStatus> {
    return this.prisma.internetStatus.update(args);
  }
  async deleteInternetStatus(
    args: Prisma.InternetStatusDeleteArgs
  ): Promise<PrismaInternetStatus> {
    return this.prisma.internetStatus.delete(args);
  }
}
