/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InternetStatusService } from "../internetStatus.service";
import { InternetStatusCreateInput } from "./InternetStatusCreateInput";
import { InternetStatus } from "./InternetStatus";
import { InternetStatusFindManyArgs } from "./InternetStatusFindManyArgs";
import { InternetStatusWhereUniqueInput } from "./InternetStatusWhereUniqueInput";
import { InternetStatusUpdateInput } from "./InternetStatusUpdateInput";

export class InternetStatusControllerBase {
  constructor(protected readonly service: InternetStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InternetStatus })
  async createInternetStatus(
    @common.Body() data: InternetStatusCreateInput
  ): Promise<InternetStatus> {
    return await this.service.createInternetStatus({
      data: data,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InternetStatus] })
  @ApiNestedQuery(InternetStatusFindManyArgs)
  async internetStatuses(
    @common.Req() request: Request
  ): Promise<InternetStatus[]> {
    const args = plainToClass(InternetStatusFindManyArgs, request.query);
    return this.service.internetStatuses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InternetStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async internetStatus(
    @common.Param() params: InternetStatusWhereUniqueInput
  ): Promise<InternetStatus | null> {
    const result = await this.service.internetStatus({
      where: params,
      select: {
        createdAt: true,
        id: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InternetStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInternetStatus(
    @common.Param() params: InternetStatusWhereUniqueInput,
    @common.Body() data: InternetStatusUpdateInput
  ): Promise<InternetStatus | null> {
    try {
      return await this.service.updateInternetStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InternetStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInternetStatus(
    @common.Param() params: InternetStatusWhereUniqueInput
  ): Promise<InternetStatus | null> {
    try {
      return await this.service.deleteInternetStatus({
        where: params,
        select: {
          createdAt: true,
          id: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
