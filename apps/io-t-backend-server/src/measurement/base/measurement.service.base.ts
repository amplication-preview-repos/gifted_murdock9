/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Measurement as PrismaMeasurement,
  User as PrismaUser,
} from "@prisma/client";

export class MeasurementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeasurementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.measurement.count(args);
  }

  async measurements(
    args: Prisma.MeasurementFindManyArgs
  ): Promise<PrismaMeasurement[]> {
    return this.prisma.measurement.findMany(args);
  }
  async measurement(
    args: Prisma.MeasurementFindUniqueArgs
  ): Promise<PrismaMeasurement | null> {
    return this.prisma.measurement.findUnique(args);
  }
  async createMeasurement(
    args: Prisma.MeasurementCreateArgs
  ): Promise<PrismaMeasurement> {
    return this.prisma.measurement.create(args);
  }
  async updateMeasurement(
    args: Prisma.MeasurementUpdateArgs
  ): Promise<PrismaMeasurement> {
    return this.prisma.measurement.update(args);
  }
  async deleteMeasurement(
    args: Prisma.MeasurementDeleteArgs
  ): Promise<PrismaMeasurement> {
    return this.prisma.measurement.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.measurement
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
